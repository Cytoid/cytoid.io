/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation LinkExternalAccountDonation($token: String!) {\n    result: addExternalAccount(token: $token)\n  }\n": types.LinkExternalAccountDonationDocument,
    "\n  query FetchLevelRanking($levelUid: String!, $type: String!, $start: Int!) {\n    chart(levelUid: $levelUid, chartType: $type) {\n      id\n      numPlayers\n      leaderboard(limit: 10, start: $start) {\n        id\n        date\n        owner {\n          id\n          uid\n          name\n          avatar {\n            small\n          }\n        }\n        score\n        accuracy\n        mods\n        details {\n          perfect\n          great\n          good\n          bad\n          miss\n          maxCombo\n        }\n      }\n    }\n  }\n": types.FetchLevelRankingDocument,
    "\n  mutation UnpackLevel($token: String!, $replace: String) {\n    package: unpackLevelPackage(token: $token, replace: $replace) {\n      id\n      uid\n      title\n    }\n  }\n": types.UnpackLevelDocument,
    "\n  query GetSettingsProfile($id: ID!) {\n    profile(id: $id) {\n      id\n      bio\n      birthday\n      header {\n        stripe\n      }\n    }\n  }\n": types.GetSettingsProfileDocument,
    "\n  mutation UpdateProfile($input: ProfileInput!) {\n    result: updateProfile(input: $input)\n  }\n": types.UpdateProfileDocument,
    "\n  mutation UpdateAvatar($path: String) {\n    result: setAvatar(path: $path) {\n      large\n    }\n  }\n": types.UpdateAvatarDocument,
    "\n  query GetUserEmails {\n    my {\n      emails {\n        address\n        verified\n        primary\n      }\n    }\n  }\n": types.GetUserEmailsDocument,
    "\n  mutation AddEmail($email: String!) {\n    addEmail(email: $email)\n  }\n": types.AddEmailDocument,
    "\n  mutation DeleteEmail($email: String!) {\n    deleteEmail(email: $email)\n  }\n": types.DeleteEmailDocument,
    "\n  mutation MakeEmailPrimary($email: String!) {\n    makeEmailPrimary(email: $email)\n  }\n": types.MakeEmailPrimaryDocument,
    "\n  mutation SendConfirmationEmail($email: String!) {\n    sendVerificationEmail(email: $email)\n  }\n": types.SendConfirmationEmailDocument,
    "\n  query GetSettingsProfileHeader($id: ID!) {\n    profile(id: $id) {\n      header {\n        stripe\n      }\n    }\n  }\n": types.GetSettingsProfileHeaderDocument,
    "\n  mutation UpdateProfileHeader($path: String!) {\n    result: updateProfileHeader(path: $path) {\n      stripe\n    }\n  }\n": types.UpdateProfileHeaderDocument,
    "\n  query FetchNavCard($id: ID!) {\n    profile(id: $id) {\n      id\n      exp {\n        totalExp\n        currentLevelExp\n        nextLevelExp\n        currentLevel\n      }\n      rating\n      header {\n        thumbnail\n      }\n      user {\n        id\n        avatar {\n          original\n        }\n      }\n    }\n  }\n": types.FetchNavCardDocument,
    "\n  query FetchCollection($uid: String!) {\n    collection(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      description\n      creationDate\n      modificationDate\n      tags\n      state\n      cover {\n        original\n      }\n      owner {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      levels {\n        id\n        uid\n        title\n        owner {\n          id\n          uid\n          name\n          avatar {\n            small\n          }\n        }\n        metadata {\n          title_localized\n          artist {\n            name\n          }\n        }\n        bundle {\n          backgroundImage {\n            thumbnail\n          }\n          musicPreview\n        }\n        charts {\n          type\n          difficulty\n          name\n          notesCount\n        }\n      }\n      metadata {\n        cover {\n          name\n          url\n        }\n      }\n    }\n  }\n": types.FetchCollectionDocument,
    "\n  mutation StudioUpdateCollection($id: ID!, $data: CollectionInput!) {\n    updateCollection(id: $id, input: $data) {\n      id\n    }\n  }\n": types.StudioUpdateCollectionDocument,
    "\n  query FetchCollectionForEditing($uid: String!) {\n    collection(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      description\n      tags\n      state\n      cover {\n        original\n      }\n      owner {\n        id\n      }\n      levels {\n        id\n        uid\n        title\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n    }\n    my {\n      user {\n        id\n      }\n    }\n  }\n": types.FetchCollectionForEditingDocument,
    "\n  query VerifyLevelsForCollection($id: String!) {\n    level(uid: $id) {\n      id\n      uid\n      title\n    }\n  }\n": types.VerifyLevelsForCollectionDocument,
    "\n  query FetchCollections($cursor: ID, $limit: Int!, $ownerId: String){\n    collections(limit: $limit, cursor: $cursor, ownerId: $ownerId) {\n      id\n      uid\n      cover {\n        thumbnail\n      }\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      title\n      slogan\n      levelCount\n      creationDate\n    }\n  }\n": types.FetchCollectionsDocument,
    "\n  query FetchHomePage {\n    discordOnlineCount\n    collectionsCount\n    posts: getActivePosts(limit: 10) {\n      id\n      uid\n      title\n      slogan\n      cover {\n        stripe\n      }\n      creationDate\n    }\n    gettingStarted: collection(uid: \"getting-started\") {\n      ...CollectionInfoFragment\n    }\n    hitech: collection(uid: \"hi-tech\") {\n      ...CollectionInfoFragment\n      levels(limit: 5) {\n        ...HomeLevelCardFragment\n      }\n    }\n    latestFeaturedLevels: levels(category: \"featured\", limit:1, sort: CREATION_DATE, order:DESC) {\n      ...HomeLevelCardFragment\n    }\n    levelsCount\n  }\n  fragment HomeLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n  }\n  fragment CollectionInfoFragment on Collection {\n    id\n    uid\n    title\n    slogan\n    levelCount\n    cover {\n      thumbnail\n    }\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n  }\n": types.FetchHomePageDocument,
    "\n  query FetchHomePageLate {\n    comments: recentComments(limit: 5) {\n      id\n      category\n      key\n      content\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      metadata\n    }\n    recentRecords(ranked:true, limit:10) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      chart {\n        id\n        difficulty\n        name\n        type\n        notesCount\n        level {\n          uid\n          title\n          bundle {\n            backgroundImage {\n            stripe\n            }\n          }\n        }\n      }\n      score\n      accuracy\n      rank\n    }\n  }\n": types.FetchHomePageLateDocument,
    "\n  query FetchLevel($uid: String!){\n    level(uid: $uid) {\n      id\n      uid\n      title\n      description\n      state\n      censored\n      size\n      tags\n      category\n      creationDate\n      modificationDate\n      owned\n      owner {\n        id\n        uid\n        name\n        avatar { large }\n      }\n      charts {\n        difficulty\n        type\n        name\n        notesCount\n      }\n      metadata {\n        artist {\n          name\n          localized_name\n          url\n        }\n        illustrator {\n          name\n          localized_name\n          url\n        }\n        charter {\n          name\n          localized_name\n          url\n        }\n        storyboarder {\n          name\n          localized_name\n          url\n        }\n      }\n      rating {\n        average\n        total\n        distribution\n        rating\n      }\n      bundle {\n        musicPreview\n        backgroundImage {\n          original\n        }\n      }\n    }\n  }\n": types.FetchLevelDocument,
    "\n  mutation LevelRate($uid: String!, $rating: Int) {\n    rateLevel(id: $uid, rating: $rating) {\n      average\n      total\n      distribution\n      rating\n    }\n  }\n": types.LevelRateDocument,
    "\n  mutation AddToLibrary($levelId: Int!) {\n    addToLibrary(levelId: $levelId)\n  }\n": types.AddToLibraryDocument,
    "\n  mutation RemoveFromLibrary($levelId: Int!) {\n    removeFromLibrary(levelId: $levelId)\n  }\n": types.RemoveFromLibraryDocument,
    "\n  query FetchLevelForEditing($uid: String!) {\n    level(uid: $uid) {\n      id\n      uid\n      title\n      description\n      state\n      censored\n      size\n      tags\n      creationDate\n      modificationDate\n      category\n      owner {\n        id\n        uid\n        name\n        avatar { large }\n      }\n      charts {\n        difficulty\n        type\n        name\n        notesCount\n      }\n      metadata {\n        artist {\n          name\n          localized_name\n          url\n        }\n        illustrator {\n          name\n          localized_name\n          url\n        }\n        charter {\n          name\n          localized_name\n          url\n        }\n        storyboarder {\n          name\n          localized_name\n          url\n        }\n      }\n      rating {\n        average\n        total\n        distribution\n        rating\n      }\n      bundle {\n        musicPreview\n        backgroundImage {\n          original\n        }\n      }\n    }\n    my {\n      user {\n        id\n      }\n    }\n  }\n": types.FetchLevelForEditingDocument,
    "\n  mutation UpdateLevel($id: ID!, $input: UpdateLevelInput!) {\n    updateLevel(id: $id, input: $input)\n  }\n": types.UpdateLevelDocument,
    "\n  query FetchUserLibrary {\n    my {\n      grantedLevels: library(granted: true) {\n        ...LibraryLevelCardFragment\n      }\n      levels: library(granted: false) {\n        ...LibraryLevelCardFragment\n      }\n    }\n  }\n  fragment LibraryLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n": types.FetchUserLibraryDocument,
    "\n  query GetPosts($uid: String!) {\n    page: getPost(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      content\n      state\n      creationDate\n      modificationDate\n      startDate\n      endDate\n      cover {\n        original\n      }\n    }\n  }\n": types.GetPostsDocument,
    "\n  query GetPost($uid: String!) {\n    post: getPost(uid: $uid) {\n      id\n      uid\n      title\n      type\n      slogan\n      content\n      state\n      creationDate\n      modificationDate\n      startDate\n      endDate\n      cover {\n        original\n      }\n      logo {\n        original\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n      level {\n        ...PostLevelCardFragment\n      }\n      collection {\n        ...PostCollectionInfoFragment\n        levels(limit: 5) {\n          ...PostLevelCardFragment\n        }\n      }\n    }\n  }\n  fragment PostLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n  fragment PostCollectionInfoFragment on Collection {\n    id\n    uid\n    title\n    slogan\n    cover {\n      thumbnail\n    }\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n  }\n": types.GetPostDocument,
    "\n  mutation StudioUpdatePost($id: ID!, $data: PostInput!) {\n    updatePost(id: $id, input: $data) {\n      id\n    }\n  }\n": types.StudioUpdatePostDocument,
    "\n  query FetchPostForEditing($uid: String!) {\n    post: getPost(uid: $uid) {\n      id\n      type\n      uid\n      title\n      slogan\n      content\n      startDate\n      endDate\n      state\n      locked\n      epicId\n      level {\n        id\n        uid\n        title\n      }\n      collection {\n        id\n        uid\n        title\n      }\n      cover {\n        original\n      }\n      logo {\n        original\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n    }\n    }\n": types.FetchPostForEditingDocument,
    "\n  query FetchPosts($skip: Int, $limit: Int!){\n    posts: getPosts(limit: $limit, skip: $skip) {\n      id\n      uid\n      title\n      slogan\n      cover {\n        stripe\n      }\n      creationDate\n    }\n  }\n": types.FetchPostsDocument,
    "\n  query FetchProfilePage($uid: String!) {\n    profile(uid: $uid) {\n      bio\n      header {\n        original\n      }\n      user {\n        id\n        uid\n        name\n        active\n        registrationDate\n        avatar {\n          large\n        }\n        collections(first: 2) {\n          id\n          uid\n          cover {\n            thumbnail\n          }\n          title\n          slogan\n          levelCount\n          creationDate\n        }\n        collectionsCount\n        lastSeen\n        levelsCount\n        qualifiedLevelsCount: levelsCount(category: \"qualified\")\n        featuredLevelsCount: levelsCount(category: \"featured\")\n        levels(category: \"!featured !qualified\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n        qualifiedLevels: levels(category: \"qualified\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n        featuredLevels: levels(category: \"featured\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n      }\n      rating\n      badges {\n        uid\n        title\n        description\n        metadata\n      }\n      recentRecords(limit: 10) {\n        id\n        date\n        chart {\n          id\n          difficulty\n          name\n          type\n          notesCount\n          level {\n            uid\n            title\n            bundle {\n              backgroundImage {\n                stripe\n              }\n            }\n          }\n        }\n        score\n        accuracy\n      }\n      exp {\n        totalExp\n        currentLevelExp\n        nextLevelExp\n        currentLevel\n      }\n      activity {\n        totalRankedPlays\n        totalRankedScore\n        clearedNotes\n        maxCombo\n        averageRankedAccuracy\n        totalPlayTime\n      }\n      timeseries {\n        count\n        cumulativeAccuracy\n        cumulativeRating\n        week\n        year\n      }\n    }\n  }\n  fragment LevelInfo on UserLevel{\n    id\n    uid\n    title\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n": types.FetchProfilePageDocument,
    "\n  query FetchRecord($id: Int!, $chartId: Int!) {\n    record (id: $id, chartId: $chartId) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      details{\n        perfect\n        great\n        good\n        bad\n        miss\n        maxCombo\n      }\n      chart {\n        id\n        type\n        name\n        notesCount\n        difficulty\n        level {\n          uid\n          title\n          category\n          metadata {\n            title_localized\n            artist {\n              name\n            }\n          }\n          bundle {\n            backgroundImage {\n              thumbnail\n            }\n            musicPreview\n          }\n        }\n      }\n      mods\n      accuracy\n      score\n      rating\n      recentRating\n    }\n  }\n": types.FetchRecordDocument,
    "\n  query FetchRecords (\n    $query: RecordQueryInput,\n    $page: Int,\n    $limit: Int,\n    $sort: RecordQuerySort,\n    $order: QueryOrder\n  ) {\n    records(\n      query: $query,\n      page: $page,\n      limit: $limit,\n      sort: $sort,\n      order: $order\n    ) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      chart {\n        id\n        difficulty\n        name\n        type\n        notesCount\n        level {\n          uid\n          title\n          bundle {\n            backgroundImage {\n              stripe\n            }\n          }\n        }\n      }\n      details {\n        perfect\n        great\n        good\n        bad\n        miss\n        maxCombo\n      }\n      score\n      accuracy\n      rating\n      recentRating\n    }\n    recordsCount(query: $query)\n  }\n": types.FetchRecordsDocument,
    "\n  mutation LinkExternalAccount($token: String!) {\n    result: addExternalAccount(token: $token)\n  }\n": types.LinkExternalAccountDocument,
    "\n  mutation ChangePasswordWithToken($password: String!, $token: String!) {\n    success: changePasswordWithToken(password: $password, token: $token)\n  }\n": types.ChangePasswordWithTokenDocument,
    "\n  mutation SendPasswordResetEmail($email: String!){\n    sendResetPasswordEmail(email: $email)\n  }\n": types.SendPasswordResetEmailDocument,
    "\n  query GetUserSecuritySettings {\n    my {\n      externals: externalAccountProviders\n    }\n  }\n": types.GetUserSecuritySettingsDocument,
    "\n  mutation ChangePassword($old: String!, $new: String!) {\n    result: changePassword(oldPassword: $old, newPassword: $new)\n  }\n": types.ChangePasswordDocument,
    "\n  mutation RemoveExternalAccount($provider: String!) {\n    result: removeExternalAccount(provider: $provider)\n  }        \n": types.RemoveExternalAccountDocument,
    "\n  query StudioAnalytics($uid: String!) {\n    profile(uid: $uid) {\n      id\n      user {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      rating\n      recentRecords(limit: 30, sort: RecentRating) {\n        ...RecordFragmentForStudioAnalytics\n      }\n      bestRecords(limit: 30) {\n        ...RecordFragmentForStudioAnalytics\n      }\n    }\n  }\n  fragment RecordFragmentForStudioAnalytics on UserRecord {\n    id\n    date\n    chart {\n      id\n      type\n      name\n      notesCount\n      difficulty\n      level {\n        uid\n        title\n        bundle {\n          backgroundImage {\n            sized(height: 90, width: 160)\n          }\n        }\n      }\n    }\n    accuracy\n    rating\n    recentRating\n  }\n": types.StudioAnalyticsDocument,
    "\n  query FetchCollectionsForStudio {\n    my {\n      collections {\n        id\n        uid\n        title\n        state\n        levelCount\n        cover {\n          sized(height: 90, width: 160)\n        }\n        creationDate\n      }\n    }\n  }\n": types.FetchCollectionsForStudioDocument,
    "\n  mutation StudioCreateCollection($data: CollectionInput!) {\n    createCollection(input: $data) {\n      id\n      uid\n    }\n  }\n": types.StudioCreateCollectionDocument,
    "\n  mutation UpdateCollectionsForStudio($id: ID!, $input: CollectionInput!) {\n    updateCollection(id: $id, input: $input) {\n      id\n    }\n  }\n": types.UpdateCollectionsForStudioDocument,
    "\n  mutation DeleteCollections($id: ID!) {\n    deleteCollection(id: $id) {\n      id\n    }\n  }\n": types.DeleteCollectionsDocument,
    "\n  query FetchLevelForStudio($limit: Int!, $start: Int!) {\n    my {\n      levelsCount\n      levels(start: $start, limit: $limit) {\n        id\n        uid\n        title\n        creationDate\n        bundle {\n          backgroundImage {\n            sized(height: 90, width: 160)\n          }\n        }\n        state\n        avgRating\n        ratingCount\n        downloadCount\n        playCount\n      }\n    }\n  }\n": types.FetchLevelForStudioDocument,
    "\n  mutation DeleteLevel($id: ID!) {\n    deleteLevel(id: $id)\n  }\n": types.DeleteLevelDocument,
    "\n  query StudioGetPosts {\n    posts: getPosts(limit: 100, all: true) {\n      id\n      type\n      uid\n      title\n      slogan\n      creationDate\n      state\n      cover {\n        sized(height: 90, width: 160)\n      }\n    }\n  }\n": types.StudioGetPostsDocument,
    "\n  mutation StudioCreatePost($data: PostInput!) {\n    post: createPost(post: $data) {\n      id\n      uid\n    }\n  }\n": types.StudioCreatePostDocument,
    "\n  mutation StudioDeletePost($id: ID!) {\n    deletePost(id: $id) {\n      id\n    }\n  }\n": types.StudioDeletePostDocument,
    "\n  query StudioLookupUser($uid: String, $id: ID) {\n    user(id: $id, uid: $uid) {\n      id\n      uid\n      name\n      emails {\n        address\n        verified\n      }\n      registrationDate\n      role\n      avatar {\n        large\n      }\n      active\n    }\n  }\n": types.StudioLookupUserDocument,
    "\n  mutation StudioSetUserActive($id: ID!, $active: Boolean!) {\n    setUserActive(id: $id, active: $active)\n  }\n": types.StudioSetUserActiveDocument,
    "\n  mutation StudioGrantUserBadge($id: ID!, $badge: String!) {\n    grantUserBadge(id: $id, badge: $badge)\n  }\n": types.StudioGrantUserBadgeDocument,
    "\n  mutation StudioBanUser($id: ID!, $reason: String!) {\n    banUser(id: $id, reason: $reason)\n  }\n": types.StudioBanUserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LinkExternalAccountDonation($token: String!) {\n    result: addExternalAccount(token: $token)\n  }\n"): (typeof documents)["\n  mutation LinkExternalAccountDonation($token: String!) {\n    result: addExternalAccount(token: $token)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchLevelRanking($levelUid: String!, $type: String!, $start: Int!) {\n    chart(levelUid: $levelUid, chartType: $type) {\n      id\n      numPlayers\n      leaderboard(limit: 10, start: $start) {\n        id\n        date\n        owner {\n          id\n          uid\n          name\n          avatar {\n            small\n          }\n        }\n        score\n        accuracy\n        mods\n        details {\n          perfect\n          great\n          good\n          bad\n          miss\n          maxCombo\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchLevelRanking($levelUid: String!, $type: String!, $start: Int!) {\n    chart(levelUid: $levelUid, chartType: $type) {\n      id\n      numPlayers\n      leaderboard(limit: 10, start: $start) {\n        id\n        date\n        owner {\n          id\n          uid\n          name\n          avatar {\n            small\n          }\n        }\n        score\n        accuracy\n        mods\n        details {\n          perfect\n          great\n          good\n          bad\n          miss\n          maxCombo\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UnpackLevel($token: String!, $replace: String) {\n    package: unpackLevelPackage(token: $token, replace: $replace) {\n      id\n      uid\n      title\n    }\n  }\n"): (typeof documents)["\n  mutation UnpackLevel($token: String!, $replace: String) {\n    package: unpackLevelPackage(token: $token, replace: $replace) {\n      id\n      uid\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSettingsProfile($id: ID!) {\n    profile(id: $id) {\n      id\n      bio\n      birthday\n      header {\n        stripe\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSettingsProfile($id: ID!) {\n    profile(id: $id) {\n      id\n      bio\n      birthday\n      header {\n        stripe\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProfile($input: ProfileInput!) {\n    result: updateProfile(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateProfile($input: ProfileInput!) {\n    result: updateProfile(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAvatar($path: String) {\n    result: setAvatar(path: $path) {\n      large\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAvatar($path: String) {\n    result: setAvatar(path: $path) {\n      large\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserEmails {\n    my {\n      emails {\n        address\n        verified\n        primary\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserEmails {\n    my {\n      emails {\n        address\n        verified\n        primary\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddEmail($email: String!) {\n    addEmail(email: $email)\n  }\n"): (typeof documents)["\n  mutation AddEmail($email: String!) {\n    addEmail(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteEmail($email: String!) {\n    deleteEmail(email: $email)\n  }\n"): (typeof documents)["\n  mutation DeleteEmail($email: String!) {\n    deleteEmail(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeEmailPrimary($email: String!) {\n    makeEmailPrimary(email: $email)\n  }\n"): (typeof documents)["\n  mutation MakeEmailPrimary($email: String!) {\n    makeEmailPrimary(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendConfirmationEmail($email: String!) {\n    sendVerificationEmail(email: $email)\n  }\n"): (typeof documents)["\n  mutation SendConfirmationEmail($email: String!) {\n    sendVerificationEmail(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSettingsProfileHeader($id: ID!) {\n    profile(id: $id) {\n      header {\n        stripe\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSettingsProfileHeader($id: ID!) {\n    profile(id: $id) {\n      header {\n        stripe\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProfileHeader($path: String!) {\n    result: updateProfileHeader(path: $path) {\n      stripe\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProfileHeader($path: String!) {\n    result: updateProfileHeader(path: $path) {\n      stripe\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchNavCard($id: ID!) {\n    profile(id: $id) {\n      id\n      exp {\n        totalExp\n        currentLevelExp\n        nextLevelExp\n        currentLevel\n      }\n      rating\n      header {\n        thumbnail\n      }\n      user {\n        id\n        avatar {\n          original\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchNavCard($id: ID!) {\n    profile(id: $id) {\n      id\n      exp {\n        totalExp\n        currentLevelExp\n        nextLevelExp\n        currentLevel\n      }\n      rating\n      header {\n        thumbnail\n      }\n      user {\n        id\n        avatar {\n          original\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchCollection($uid: String!) {\n    collection(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      description\n      creationDate\n      modificationDate\n      tags\n      state\n      cover {\n        original\n      }\n      owner {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      levels {\n        id\n        uid\n        title\n        owner {\n          id\n          uid\n          name\n          avatar {\n            small\n          }\n        }\n        metadata {\n          title_localized\n          artist {\n            name\n          }\n        }\n        bundle {\n          backgroundImage {\n            thumbnail\n          }\n          musicPreview\n        }\n        charts {\n          type\n          difficulty\n          name\n          notesCount\n        }\n      }\n      metadata {\n        cover {\n          name\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchCollection($uid: String!) {\n    collection(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      description\n      creationDate\n      modificationDate\n      tags\n      state\n      cover {\n        original\n      }\n      owner {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      levels {\n        id\n        uid\n        title\n        owner {\n          id\n          uid\n          name\n          avatar {\n            small\n          }\n        }\n        metadata {\n          title_localized\n          artist {\n            name\n          }\n        }\n        bundle {\n          backgroundImage {\n            thumbnail\n          }\n          musicPreview\n        }\n        charts {\n          type\n          difficulty\n          name\n          notesCount\n        }\n      }\n      metadata {\n        cover {\n          name\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StudioUpdateCollection($id: ID!, $data: CollectionInput!) {\n    updateCollection(id: $id, input: $data) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation StudioUpdateCollection($id: ID!, $data: CollectionInput!) {\n    updateCollection(id: $id, input: $data) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchCollectionForEditing($uid: String!) {\n    collection(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      description\n      tags\n      state\n      cover {\n        original\n      }\n      owner {\n        id\n      }\n      levels {\n        id\n        uid\n        title\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n    }\n    my {\n      user {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchCollectionForEditing($uid: String!) {\n    collection(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      description\n      tags\n      state\n      cover {\n        original\n      }\n      owner {\n        id\n      }\n      levels {\n        id\n        uid\n        title\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n    }\n    my {\n      user {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VerifyLevelsForCollection($id: String!) {\n    level(uid: $id) {\n      id\n      uid\n      title\n    }\n  }\n"): (typeof documents)["\n  query VerifyLevelsForCollection($id: String!) {\n    level(uid: $id) {\n      id\n      uid\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchCollections($cursor: ID, $limit: Int!, $ownerId: String){\n    collections(limit: $limit, cursor: $cursor, ownerId: $ownerId) {\n      id\n      uid\n      cover {\n        thumbnail\n      }\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      title\n      slogan\n      levelCount\n      creationDate\n    }\n  }\n"): (typeof documents)["\n  query FetchCollections($cursor: ID, $limit: Int!, $ownerId: String){\n    collections(limit: $limit, cursor: $cursor, ownerId: $ownerId) {\n      id\n      uid\n      cover {\n        thumbnail\n      }\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      title\n      slogan\n      levelCount\n      creationDate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchHomePage {\n    discordOnlineCount\n    collectionsCount\n    posts: getActivePosts(limit: 10) {\n      id\n      uid\n      title\n      slogan\n      cover {\n        stripe\n      }\n      creationDate\n    }\n    gettingStarted: collection(uid: \"getting-started\") {\n      ...CollectionInfoFragment\n    }\n    hitech: collection(uid: \"hi-tech\") {\n      ...CollectionInfoFragment\n      levels(limit: 5) {\n        ...HomeLevelCardFragment\n      }\n    }\n    latestFeaturedLevels: levels(category: \"featured\", limit:1, sort: CREATION_DATE, order:DESC) {\n      ...HomeLevelCardFragment\n    }\n    levelsCount\n  }\n  fragment HomeLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n  }\n  fragment CollectionInfoFragment on Collection {\n    id\n    uid\n    title\n    slogan\n    levelCount\n    cover {\n      thumbnail\n    }\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchHomePage {\n    discordOnlineCount\n    collectionsCount\n    posts: getActivePosts(limit: 10) {\n      id\n      uid\n      title\n      slogan\n      cover {\n        stripe\n      }\n      creationDate\n    }\n    gettingStarted: collection(uid: \"getting-started\") {\n      ...CollectionInfoFragment\n    }\n    hitech: collection(uid: \"hi-tech\") {\n      ...CollectionInfoFragment\n      levels(limit: 5) {\n        ...HomeLevelCardFragment\n      }\n    }\n    latestFeaturedLevels: levels(category: \"featured\", limit:1, sort: CREATION_DATE, order:DESC) {\n      ...HomeLevelCardFragment\n    }\n    levelsCount\n  }\n  fragment HomeLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n  }\n  fragment CollectionInfoFragment on Collection {\n    id\n    uid\n    title\n    slogan\n    levelCount\n    cover {\n      thumbnail\n    }\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchHomePageLate {\n    comments: recentComments(limit: 5) {\n      id\n      category\n      key\n      content\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      metadata\n    }\n    recentRecords(ranked:true, limit:10) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      chart {\n        id\n        difficulty\n        name\n        type\n        notesCount\n        level {\n          uid\n          title\n          bundle {\n            backgroundImage {\n            stripe\n            }\n          }\n        }\n      }\n      score\n      accuracy\n      rank\n    }\n  }\n"): (typeof documents)["\n  query FetchHomePageLate {\n    comments: recentComments(limit: 5) {\n      id\n      category\n      key\n      content\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      metadata\n    }\n    recentRecords(ranked:true, limit:10) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      chart {\n        id\n        difficulty\n        name\n        type\n        notesCount\n        level {\n          uid\n          title\n          bundle {\n            backgroundImage {\n            stripe\n            }\n          }\n        }\n      }\n      score\n      accuracy\n      rank\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchLevel($uid: String!){\n    level(uid: $uid) {\n      id\n      uid\n      title\n      description\n      state\n      censored\n      size\n      tags\n      category\n      creationDate\n      modificationDate\n      owned\n      owner {\n        id\n        uid\n        name\n        avatar { large }\n      }\n      charts {\n        difficulty\n        type\n        name\n        notesCount\n      }\n      metadata {\n        artist {\n          name\n          localized_name\n          url\n        }\n        illustrator {\n          name\n          localized_name\n          url\n        }\n        charter {\n          name\n          localized_name\n          url\n        }\n        storyboarder {\n          name\n          localized_name\n          url\n        }\n      }\n      rating {\n        average\n        total\n        distribution\n        rating\n      }\n      bundle {\n        musicPreview\n        backgroundImage {\n          original\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchLevel($uid: String!){\n    level(uid: $uid) {\n      id\n      uid\n      title\n      description\n      state\n      censored\n      size\n      tags\n      category\n      creationDate\n      modificationDate\n      owned\n      owner {\n        id\n        uid\n        name\n        avatar { large }\n      }\n      charts {\n        difficulty\n        type\n        name\n        notesCount\n      }\n      metadata {\n        artist {\n          name\n          localized_name\n          url\n        }\n        illustrator {\n          name\n          localized_name\n          url\n        }\n        charter {\n          name\n          localized_name\n          url\n        }\n        storyboarder {\n          name\n          localized_name\n          url\n        }\n      }\n      rating {\n        average\n        total\n        distribution\n        rating\n      }\n      bundle {\n        musicPreview\n        backgroundImage {\n          original\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LevelRate($uid: String!, $rating: Int) {\n    rateLevel(id: $uid, rating: $rating) {\n      average\n      total\n      distribution\n      rating\n    }\n  }\n"): (typeof documents)["\n  mutation LevelRate($uid: String!, $rating: Int) {\n    rateLevel(id: $uid, rating: $rating) {\n      average\n      total\n      distribution\n      rating\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddToLibrary($levelId: Int!) {\n    addToLibrary(levelId: $levelId)\n  }\n"): (typeof documents)["\n  mutation AddToLibrary($levelId: Int!) {\n    addToLibrary(levelId: $levelId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromLibrary($levelId: Int!) {\n    removeFromLibrary(levelId: $levelId)\n  }\n"): (typeof documents)["\n  mutation RemoveFromLibrary($levelId: Int!) {\n    removeFromLibrary(levelId: $levelId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchLevelForEditing($uid: String!) {\n    level(uid: $uid) {\n      id\n      uid\n      title\n      description\n      state\n      censored\n      size\n      tags\n      creationDate\n      modificationDate\n      category\n      owner {\n        id\n        uid\n        name\n        avatar { large }\n      }\n      charts {\n        difficulty\n        type\n        name\n        notesCount\n      }\n      metadata {\n        artist {\n          name\n          localized_name\n          url\n        }\n        illustrator {\n          name\n          localized_name\n          url\n        }\n        charter {\n          name\n          localized_name\n          url\n        }\n        storyboarder {\n          name\n          localized_name\n          url\n        }\n      }\n      rating {\n        average\n        total\n        distribution\n        rating\n      }\n      bundle {\n        musicPreview\n        backgroundImage {\n          original\n        }\n      }\n    }\n    my {\n      user {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchLevelForEditing($uid: String!) {\n    level(uid: $uid) {\n      id\n      uid\n      title\n      description\n      state\n      censored\n      size\n      tags\n      creationDate\n      modificationDate\n      category\n      owner {\n        id\n        uid\n        name\n        avatar { large }\n      }\n      charts {\n        difficulty\n        type\n        name\n        notesCount\n      }\n      metadata {\n        artist {\n          name\n          localized_name\n          url\n        }\n        illustrator {\n          name\n          localized_name\n          url\n        }\n        charter {\n          name\n          localized_name\n          url\n        }\n        storyboarder {\n          name\n          localized_name\n          url\n        }\n      }\n      rating {\n        average\n        total\n        distribution\n        rating\n      }\n      bundle {\n        musicPreview\n        backgroundImage {\n          original\n        }\n      }\n    }\n    my {\n      user {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateLevel($id: ID!, $input: UpdateLevelInput!) {\n    updateLevel(id: $id, input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateLevel($id: ID!, $input: UpdateLevelInput!) {\n    updateLevel(id: $id, input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchUserLibrary {\n    my {\n      grantedLevels: library(granted: true) {\n        ...LibraryLevelCardFragment\n      }\n      levels: library(granted: false) {\n        ...LibraryLevelCardFragment\n      }\n    }\n  }\n  fragment LibraryLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n"): (typeof documents)["\n  query FetchUserLibrary {\n    my {\n      grantedLevels: library(granted: true) {\n        ...LibraryLevelCardFragment\n      }\n      levels: library(granted: false) {\n        ...LibraryLevelCardFragment\n      }\n    }\n  }\n  fragment LibraryLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPosts($uid: String!) {\n    page: getPost(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      content\n      state\n      creationDate\n      modificationDate\n      startDate\n      endDate\n      cover {\n        original\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPosts($uid: String!) {\n    page: getPost(uid: $uid) {\n      id\n      uid\n      title\n      slogan\n      content\n      state\n      creationDate\n      modificationDate\n      startDate\n      endDate\n      cover {\n        original\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPost($uid: String!) {\n    post: getPost(uid: $uid) {\n      id\n      uid\n      title\n      type\n      slogan\n      content\n      state\n      creationDate\n      modificationDate\n      startDate\n      endDate\n      cover {\n        original\n      }\n      logo {\n        original\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n      level {\n        ...PostLevelCardFragment\n      }\n      collection {\n        ...PostCollectionInfoFragment\n        levels(limit: 5) {\n          ...PostLevelCardFragment\n        }\n      }\n    }\n  }\n  fragment PostLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n  fragment PostCollectionInfoFragment on Collection {\n    id\n    uid\n    title\n    slogan\n    cover {\n      thumbnail\n    }\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPost($uid: String!) {\n    post: getPost(uid: $uid) {\n      id\n      uid\n      title\n      type\n      slogan\n      content\n      state\n      creationDate\n      modificationDate\n      startDate\n      endDate\n      cover {\n        original\n      }\n      logo {\n        original\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n      level {\n        ...PostLevelCardFragment\n      }\n      collection {\n        ...PostCollectionInfoFragment\n        levels(limit: 5) {\n          ...PostLevelCardFragment\n        }\n      }\n    }\n  }\n  fragment PostLevelCardFragment on Level {\n    id\n    uid\n    title\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n  fragment PostCollectionInfoFragment on Collection {\n    id\n    uid\n    title\n    slogan\n    cover {\n      thumbnail\n    }\n    owner {\n      id\n      uid\n      name\n      avatar {\n        small\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StudioUpdatePost($id: ID!, $data: PostInput!) {\n    updatePost(id: $id, input: $data) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation StudioUpdatePost($id: ID!, $data: PostInput!) {\n    updatePost(id: $id, input: $data) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchPostForEditing($uid: String!) {\n    post: getPost(uid: $uid) {\n      id\n      type\n      uid\n      title\n      slogan\n      content\n      startDate\n      endDate\n      state\n      locked\n      epicId\n      level {\n        id\n        uid\n        title\n      }\n      collection {\n        id\n        uid\n        title\n      }\n      cover {\n        original\n      }\n      logo {\n        original\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n    }\n    }\n"): (typeof documents)["\n  query FetchPostForEditing($uid: String!) {\n    post: getPost(uid: $uid) {\n      id\n      type\n      uid\n      title\n      slogan\n      content\n      startDate\n      endDate\n      state\n      locked\n      epicId\n      level {\n        id\n        uid\n        title\n      }\n      collection {\n        id\n        uid\n        title\n      }\n      cover {\n        original\n      }\n      logo {\n        original\n      }\n      metadata {\n        cover {\n          name\n          localized_name\n          url\n        }\n      }\n    }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchPosts($skip: Int, $limit: Int!){\n    posts: getPosts(limit: $limit, skip: $skip) {\n      id\n      uid\n      title\n      slogan\n      cover {\n        stripe\n      }\n      creationDate\n    }\n  }\n"): (typeof documents)["\n  query FetchPosts($skip: Int, $limit: Int!){\n    posts: getPosts(limit: $limit, skip: $skip) {\n      id\n      uid\n      title\n      slogan\n      cover {\n        stripe\n      }\n      creationDate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchProfilePage($uid: String!) {\n    profile(uid: $uid) {\n      bio\n      header {\n        original\n      }\n      user {\n        id\n        uid\n        name\n        active\n        registrationDate\n        avatar {\n          large\n        }\n        collections(first: 2) {\n          id\n          uid\n          cover {\n            thumbnail\n          }\n          title\n          slogan\n          levelCount\n          creationDate\n        }\n        collectionsCount\n        lastSeen\n        levelsCount\n        qualifiedLevelsCount: levelsCount(category: \"qualified\")\n        featuredLevelsCount: levelsCount(category: \"featured\")\n        levels(category: \"!featured !qualified\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n        qualifiedLevels: levels(category: \"qualified\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n        featuredLevels: levels(category: \"featured\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n      }\n      rating\n      badges {\n        uid\n        title\n        description\n        metadata\n      }\n      recentRecords(limit: 10) {\n        id\n        date\n        chart {\n          id\n          difficulty\n          name\n          type\n          notesCount\n          level {\n            uid\n            title\n            bundle {\n              backgroundImage {\n                stripe\n              }\n            }\n          }\n        }\n        score\n        accuracy\n      }\n      exp {\n        totalExp\n        currentLevelExp\n        nextLevelExp\n        currentLevel\n      }\n      activity {\n        totalRankedPlays\n        totalRankedScore\n        clearedNotes\n        maxCombo\n        averageRankedAccuracy\n        totalPlayTime\n      }\n      timeseries {\n        count\n        cumulativeAccuracy\n        cumulativeRating\n        week\n        year\n      }\n    }\n  }\n  fragment LevelInfo on UserLevel{\n    id\n    uid\n    title\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n"): (typeof documents)["\n  query FetchProfilePage($uid: String!) {\n    profile(uid: $uid) {\n      bio\n      header {\n        original\n      }\n      user {\n        id\n        uid\n        name\n        active\n        registrationDate\n        avatar {\n          large\n        }\n        collections(first: 2) {\n          id\n          uid\n          cover {\n            thumbnail\n          }\n          title\n          slogan\n          levelCount\n          creationDate\n        }\n        collectionsCount\n        lastSeen\n        levelsCount\n        qualifiedLevelsCount: levelsCount(category: \"qualified\")\n        featuredLevelsCount: levelsCount(category: \"featured\")\n        levels(category: \"!featured !qualified\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n        qualifiedLevels: levels(category: \"qualified\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n        featuredLevels: levels(category: \"featured\", first: 8, sort: MODIFICATION_DATE, order: DESC) { ...LevelInfo }\n      }\n      rating\n      badges {\n        uid\n        title\n        description\n        metadata\n      }\n      recentRecords(limit: 10) {\n        id\n        date\n        chart {\n          id\n          difficulty\n          name\n          type\n          notesCount\n          level {\n            uid\n            title\n            bundle {\n              backgroundImage {\n                stripe\n              }\n            }\n          }\n        }\n        score\n        accuracy\n      }\n      exp {\n        totalExp\n        currentLevelExp\n        nextLevelExp\n        currentLevel\n      }\n      activity {\n        totalRankedPlays\n        totalRankedScore\n        clearedNotes\n        maxCombo\n        averageRankedAccuracy\n        totalPlayTime\n      }\n      timeseries {\n        count\n        cumulativeAccuracy\n        cumulativeRating\n        week\n        year\n      }\n    }\n  }\n  fragment LevelInfo on UserLevel{\n    id\n    uid\n    title\n    metadata {\n      title_localized\n      artist {\n        name\n      }\n    }\n    bundle {\n      backgroundImage {\n        thumbnail\n      }\n      music\n      musicPreview\n    }\n    charts {\n      type\n      difficulty\n      name\n      notesCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchRecord($id: Int!, $chartId: Int!) {\n    record (id: $id, chartId: $chartId) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      details{\n        perfect\n        great\n        good\n        bad\n        miss\n        maxCombo\n      }\n      chart {\n        id\n        type\n        name\n        notesCount\n        difficulty\n        level {\n          uid\n          title\n          category\n          metadata {\n            title_localized\n            artist {\n              name\n            }\n          }\n          bundle {\n            backgroundImage {\n              thumbnail\n            }\n            musicPreview\n          }\n        }\n      }\n      mods\n      accuracy\n      score\n      rating\n      recentRating\n    }\n  }\n"): (typeof documents)["\n  query FetchRecord($id: Int!, $chartId: Int!) {\n    record (id: $id, chartId: $chartId) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      details{\n        perfect\n        great\n        good\n        bad\n        miss\n        maxCombo\n      }\n      chart {\n        id\n        type\n        name\n        notesCount\n        difficulty\n        level {\n          uid\n          title\n          category\n          metadata {\n            title_localized\n            artist {\n              name\n            }\n          }\n          bundle {\n            backgroundImage {\n              thumbnail\n            }\n            musicPreview\n          }\n        }\n      }\n      mods\n      accuracy\n      score\n      rating\n      recentRating\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchRecords (\n    $query: RecordQueryInput,\n    $page: Int,\n    $limit: Int,\n    $sort: RecordQuerySort,\n    $order: QueryOrder\n  ) {\n    records(\n      query: $query,\n      page: $page,\n      limit: $limit,\n      sort: $sort,\n      order: $order\n    ) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      chart {\n        id\n        difficulty\n        name\n        type\n        notesCount\n        level {\n          uid\n          title\n          bundle {\n            backgroundImage {\n              stripe\n            }\n          }\n        }\n      }\n      details {\n        perfect\n        great\n        good\n        bad\n        miss\n        maxCombo\n      }\n      score\n      accuracy\n      rating\n      recentRating\n    }\n    recordsCount(query: $query)\n  }\n"): (typeof documents)["\n  query FetchRecords (\n    $query: RecordQueryInput,\n    $page: Int,\n    $limit: Int,\n    $sort: RecordQuerySort,\n    $order: QueryOrder\n  ) {\n    records(\n      query: $query,\n      page: $page,\n      limit: $limit,\n      sort: $sort,\n      order: $order\n    ) {\n      id\n      date\n      owner {\n        id\n        uid\n        name\n        avatar {\n          small\n        }\n      }\n      chart {\n        id\n        difficulty\n        name\n        type\n        notesCount\n        level {\n          uid\n          title\n          bundle {\n            backgroundImage {\n              stripe\n            }\n          }\n        }\n      }\n      details {\n        perfect\n        great\n        good\n        bad\n        miss\n        maxCombo\n      }\n      score\n      accuracy\n      rating\n      recentRating\n    }\n    recordsCount(query: $query)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LinkExternalAccount($token: String!) {\n    result: addExternalAccount(token: $token)\n  }\n"): (typeof documents)["\n  mutation LinkExternalAccount($token: String!) {\n    result: addExternalAccount(token: $token)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangePasswordWithToken($password: String!, $token: String!) {\n    success: changePasswordWithToken(password: $password, token: $token)\n  }\n"): (typeof documents)["\n  mutation ChangePasswordWithToken($password: String!, $token: String!) {\n    success: changePasswordWithToken(password: $password, token: $token)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendPasswordResetEmail($email: String!){\n    sendResetPasswordEmail(email: $email)\n  }\n"): (typeof documents)["\n  mutation SendPasswordResetEmail($email: String!){\n    sendResetPasswordEmail(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserSecuritySettings {\n    my {\n      externals: externalAccountProviders\n    }\n  }\n"): (typeof documents)["\n  query GetUserSecuritySettings {\n    my {\n      externals: externalAccountProviders\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangePassword($old: String!, $new: String!) {\n    result: changePassword(oldPassword: $old, newPassword: $new)\n  }\n"): (typeof documents)["\n  mutation ChangePassword($old: String!, $new: String!) {\n    result: changePassword(oldPassword: $old, newPassword: $new)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveExternalAccount($provider: String!) {\n    result: removeExternalAccount(provider: $provider)\n  }        \n"): (typeof documents)["\n  mutation RemoveExternalAccount($provider: String!) {\n    result: removeExternalAccount(provider: $provider)\n  }        \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudioAnalytics($uid: String!) {\n    profile(uid: $uid) {\n      id\n      user {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      rating\n      recentRecords(limit: 30, sort: RecentRating) {\n        ...RecordFragmentForStudioAnalytics\n      }\n      bestRecords(limit: 30) {\n        ...RecordFragmentForStudioAnalytics\n      }\n    }\n  }\n  fragment RecordFragmentForStudioAnalytics on UserRecord {\n    id\n    date\n    chart {\n      id\n      type\n      name\n      notesCount\n      difficulty\n      level {\n        uid\n        title\n        bundle {\n          backgroundImage {\n            sized(height: 90, width: 160)\n          }\n        }\n      }\n    }\n    accuracy\n    rating\n    recentRating\n  }\n"): (typeof documents)["\n  query StudioAnalytics($uid: String!) {\n    profile(uid: $uid) {\n      id\n      user {\n        id\n        uid\n        name\n        avatar {\n          large\n        }\n      }\n      rating\n      recentRecords(limit: 30, sort: RecentRating) {\n        ...RecordFragmentForStudioAnalytics\n      }\n      bestRecords(limit: 30) {\n        ...RecordFragmentForStudioAnalytics\n      }\n    }\n  }\n  fragment RecordFragmentForStudioAnalytics on UserRecord {\n    id\n    date\n    chart {\n      id\n      type\n      name\n      notesCount\n      difficulty\n      level {\n        uid\n        title\n        bundle {\n          backgroundImage {\n            sized(height: 90, width: 160)\n          }\n        }\n      }\n    }\n    accuracy\n    rating\n    recentRating\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchCollectionsForStudio {\n    my {\n      collections {\n        id\n        uid\n        title\n        state\n        levelCount\n        cover {\n          sized(height: 90, width: 160)\n        }\n        creationDate\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchCollectionsForStudio {\n    my {\n      collections {\n        id\n        uid\n        title\n        state\n        levelCount\n        cover {\n          sized(height: 90, width: 160)\n        }\n        creationDate\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StudioCreateCollection($data: CollectionInput!) {\n    createCollection(input: $data) {\n      id\n      uid\n    }\n  }\n"): (typeof documents)["\n  mutation StudioCreateCollection($data: CollectionInput!) {\n    createCollection(input: $data) {\n      id\n      uid\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCollectionsForStudio($id: ID!, $input: CollectionInput!) {\n    updateCollection(id: $id, input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCollectionsForStudio($id: ID!, $input: CollectionInput!) {\n    updateCollection(id: $id, input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCollections($id: ID!) {\n    deleteCollection(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCollections($id: ID!) {\n    deleteCollection(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchLevelForStudio($limit: Int!, $start: Int!) {\n    my {\n      levelsCount\n      levels(start: $start, limit: $limit) {\n        id\n        uid\n        title\n        creationDate\n        bundle {\n          backgroundImage {\n            sized(height: 90, width: 160)\n          }\n        }\n        state\n        avgRating\n        ratingCount\n        downloadCount\n        playCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchLevelForStudio($limit: Int!, $start: Int!) {\n    my {\n      levelsCount\n      levels(start: $start, limit: $limit) {\n        id\n        uid\n        title\n        creationDate\n        bundle {\n          backgroundImage {\n            sized(height: 90, width: 160)\n          }\n        }\n        state\n        avgRating\n        ratingCount\n        downloadCount\n        playCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteLevel($id: ID!) {\n    deleteLevel(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteLevel($id: ID!) {\n    deleteLevel(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudioGetPosts {\n    posts: getPosts(limit: 100, all: true) {\n      id\n      type\n      uid\n      title\n      slogan\n      creationDate\n      state\n      cover {\n        sized(height: 90, width: 160)\n      }\n    }\n  }\n"): (typeof documents)["\n  query StudioGetPosts {\n    posts: getPosts(limit: 100, all: true) {\n      id\n      type\n      uid\n      title\n      slogan\n      creationDate\n      state\n      cover {\n        sized(height: 90, width: 160)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StudioCreatePost($data: PostInput!) {\n    post: createPost(post: $data) {\n      id\n      uid\n    }\n  }\n"): (typeof documents)["\n  mutation StudioCreatePost($data: PostInput!) {\n    post: createPost(post: $data) {\n      id\n      uid\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StudioDeletePost($id: ID!) {\n    deletePost(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation StudioDeletePost($id: ID!) {\n    deletePost(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudioLookupUser($uid: String, $id: ID) {\n    user(id: $id, uid: $uid) {\n      id\n      uid\n      name\n      emails {\n        address\n        verified\n      }\n      registrationDate\n      role\n      avatar {\n        large\n      }\n      active\n    }\n  }\n"): (typeof documents)["\n  query StudioLookupUser($uid: String, $id: ID) {\n    user(id: $id, uid: $uid) {\n      id\n      uid\n      name\n      emails {\n        address\n        verified\n      }\n      registrationDate\n      role\n      avatar {\n        large\n      }\n      active\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StudioSetUserActive($id: ID!, $active: Boolean!) {\n    setUserActive(id: $id, active: $active)\n  }\n"): (typeof documents)["\n  mutation StudioSetUserActive($id: ID!, $active: Boolean!) {\n    setUserActive(id: $id, active: $active)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StudioGrantUserBadge($id: ID!, $badge: String!) {\n    grantUserBadge(id: $id, badge: $badge)\n  }\n"): (typeof documents)["\n  mutation StudioGrantUserBadge($id: ID!, $badge: String!) {\n    grantUserBadge(id: $id, badge: $badge)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StudioBanUser($id: ID!, $reason: String!) {\n    banUser(id: $id, reason: $reason)\n  }\n"): (typeof documents)["\n  mutation StudioBanUser($id: ID!, $reason: String!) {\n    banUser(id: $id, reason: $reason)\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;